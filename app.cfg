var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
var Queue = xdc.useModule('ti.sysbios.knl.Queue');
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
//BIOS.heapSize = 0x1000;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x2000;


/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 16;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

BIOS.cpuFreq.lo = 456000000;
/****************************************************************************/
/*                                                                          */
/*              NDK 配置                                                    */
/*                                                                          */
/****************************************************************************/
var Global = xdc.useModule('ti.ndk.config.Global');
Global.enableCodeGeneration = false;

var Ip = xdc.useModule('ti.ndk.config.Ip');
var Tcp = xdc.useModule('ti.ndk.config.Tcp');

/****************************************************************************/
/*                                                                          */
/*              EMAC 配置                                                   */
/*                                                                          */
/****************************************************************************/
// 使用 OMAPL138 EMAC 驱动
xdc.useModule('ti.drv.omapl138.Emac');



/****************************************************************************/
/*                                                                          */
/*              内存配置                                                    */
/*                                                                          */
/****************************************************************************/
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');

/* 创建一个 名为 "SystemHeap" 的 HeapMem */
var SystemHeapParams = new HeapMem.Params;
SystemHeapParams.size = 16 * 1024 * 1024;
SystemHeapParams.sectionName = "SystemHeap";

/* 创建为全局变量以便可以在 C 文件中使用 */
Program.global.SystemHeap = HeapMem.create(SystemHeapParams);

var Memory = xdc.useModule('xdc.runtime.Memory')
/* 设置 "SystemHeap" 作为默认 Heap */
/* Memory_alloc() 调用时指定堆为 NULL 所使用的堆 */
Memory.defaultHeapInstance = Program.global.SystemHeap;

/* 存储空间分配 */
Program.sectMap["SystemHeap"] = "DDR";


var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "hwi4";
hwi0Params.eventId = 65;
Program.global.hwi4 = Hwi.create(4, "&HWI_4_Isr", hwi0Params);
System.extendedFormats = "%$L%$S%$F%f%s";
Ip.autoIp = false;
Ip.address = "192.168.1.2";

//DSP uart2 中断7 ，NDK 会占用HWI5 HWI6
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "hwi7";
hwi1Params.eventId = 69;
Program.global.hwi7 = Hwi.create(7, "&DSPUART2Isr", hwi1Params);
var timer0Params = new Timer.Params();
timer0Params.instance.name = "timerBlinkLED";
timer0Params.period = 500000;
Program.global.timerBlinkLED = Timer.create(2, "&GPIOToggleLed", timer0Params);
var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "hwi5";
hwi2Params.eventId = 36;
Program.global.hwi5 = Hwi.create(5, "&HWI_5_Isr", hwi2Params);

